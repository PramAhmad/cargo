marking code = mitracode/marketingcode/sea atau air (done)
add country in mitra warehouse ()
add max_cbm mitra
add resi in shipping
<script>
    $(document).ready(function() {
        // Initialize Select2
        $('.select2').select2({
            width: '100%',
            theme: document.documentElement.classList.contains('dark') ? 'classic' : 'default'
        });
        
        // Initialize money inputs for formatting
        function initMoneyInputs() {
            $('.money-mask').each(function() {
                new Cleave(this, {
                    numeral: true,
                    numeralThousandsGroupStyle: 'thousand',
                    numeralDecimalMark: ',',
                    delimiter: '.'
                });
            });
        }
        
        initMoneyInputs();
        
        function formatNumber(number) {
            if (!number) return '0,00';
            return parseFloat(number).toLocaleString('id-ID', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });
        }
        
        function parseNumberFromFormatted(formattedNumber) {
            if (!formattedNumber) return 0;
            return parseFloat(formattedNumber.replace(/\./g, '').replace(',', '.'));
        }
        
        function normalizeNumber(formattedNumber) {
            return parseNumberFromFormatted(formattedNumber).toString();
        }
        
        // Initialize variables
        let detailCounter = 0;
        let warehouseProducts = [];
        let currentPage = 1;
        let itemsPerPage = 10;
        let filteredProducts = [];
        
        $('#customer_id').on('change', function() {
            const customerId = $(this).val();
            const marketingId = $(this).find('option:selected').data('marketing-id');
            
            if (marketingId) {
                $('#marketing_id').val(marketingId);
            } else {
                $('#marketing_id').val('').prop('disabled', true);
            }
            
            if (customerId) {
                $.get(`/api/customers/${customerId}/banks`, function(data) {
                    const bankSelect = $('#bank_id');
                    bankSelect.empty().append('<option value="">Pilih Bank</option>');
                    
                    if (data.length > 0) {
                        data.forEach(bank => {
                            const isDefault = bank.is_default ? ' (Default)' : '';
                            bankSelect.append(`
                                <option value="${bank.id}" ${bank.is_default ? 'selected' : ''}>
                                    ${bank.bank.name} - ${bank.rek_name} - ${bank.rek_no}${isDefault}
                                </option>
                            `);
                        });
                    } else {
                        bankSelect.append('<option value="" disabled>Customer tidak memiliki rekening bank</option>');
                    }
                });
            } else {
                $('#bank_id').empty().append('<option value="">Pilih Bank</option>');
            }
        });
        
        // Handle mitra selection to load warehouses
        $('#mitra_id').on('change', function() {
            const mitraId = $(this).val();
            const markingCode = $(this).find('option:selected').data('marking-code') || '';
            
            $('#marking').val(markingCode);
            
            if (mitraId) {
                // Load warehouses for this mitra
                $.get(`/api/mitras/${mitraId}/warehouses`, function(data) {
                    const warehouseSelect = $('#warehouse_id');
                    warehouseSelect.empty().append('<option value="">Pilih Gudang</option>');
                    
                    data.forEach(warehouse => {
                        warehouseSelect.append(`<option value="${warehouse.id}">${warehouse.name} - ${warehouse.products_count} item</option>`);
                    });
                    
                    warehouseSelect.prop('disabled', false);
                });
                
                // Hide the warehouse products section when mitra changes
                $('#warehouseProductsSection').addClass('hidden');
                $('#warehouseProductsList').empty();
            } else {
                $('#warehouse_id').empty().append('<option value="">Pilih Gudang</option>').prop('disabled', true);
                $('#warehouseProductsSection').addClass('hidden');
            }
        });
        
        // Handle warehouse selection to load products and warehouse details
        $('#warehouse_id').on('change', function() {
    const warehouseId = $(this).val();
    
    $('#barangList').empty();
    detailCounter = 0;
    calculateTotals();
    
    if (warehouseId) {
        // Tampilkan informasi warehouse
        $.get(`/api/warehouses/${warehouseId}`, function(warehouse) {
            if ($('#warehouse_info').length === 0) {
                const warehouseInfoHTML = `
                    <div id="warehouse_info" class="mt-2 p-3 text-sm bg-blue-50 dark:bg-slate-700 rounded-md">
                        <h6 class="font-semibold mb-1">Informasi Gudang:</h6>
                        <div class="grid grid-cols-2 gap-2">
                            <div><span class="font-medium">Nama:</span> ${warehouse.name}</div>
                            <div><span class="font-medium">Tipe:</span> ${warehouse.type || 'N/A'}</div>
                            <div class="col-span-2"><span class="font-medium">Alamat:</span> ${warehouse.address || 'N/A'}</div>
                        </div>
                    </div>
                `;
                
                $('#warehouse_id').closest('div').append(warehouseInfoHTML);
            } else {
                $('#warehouse_info').html(`
                    <h6 class="font-semibold mb-1">Informasi Gudang:</h6>
                    <div class="grid grid-cols-2 gap-2">
                        <div><span class="font-medium">Nama:</span> ${warehouse.name}</div>
                        <div><span class="font-medium">Tipe:</span> ${warehouse.type || 'N/A'}</div>
                        <div class="col-span-2"><span class="font-medium">Alamat:</span> ${warehouse.address || 'N/A'}</div>
                    </div>
                `);
            }
        });
        
        // Load products untuk warehouse ini - PERBAIKAN
        $.get(`/api/warehouses/${warehouseId}/products`, function(data) {
            console.log("Products loaded:", data.length, "items");
            warehouseProducts = data;
            filteredProducts = [...warehouseProducts];
            currentPage = 1;
            
            // Show the warehouse products section - PERBAIKAN SELECTOR
            $('#warehouseProductsSection').removeClass('hidden');
            
            // Render products with pagination
            renderProducts();
        }).fail(function(error) {
            console.error("Error loading products:", error);
        });
    } else {
        $('#warehouse_info').remove();
        $('#warehouseProductsSection').addClass('hidden');
    }
});

        
        // Search products
        $('#product_search').on('input', function() {
            const searchTerm = $(this).val().toLowerCase().trim();
            
            if (searchTerm === '') {
                filteredProducts = [...warehouseProducts];
            } else {
                filteredProducts = warehouseProducts.filter(product => 
                    product.name.toLowerCase().includes(searchTerm)
                );
            }
            
            currentPage = 1;
            renderProducts();
        });
        
        // Render products with pagination
        function renderProducts() {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const paginatedProducts = filteredProducts.slice(startIndex, endIndex);
            const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
            
            const productsList = $('#warehouseProductsList');
            productsList.empty();
            
            if (paginatedProducts.length === 0) {
                productsList.append(`<tr><td colspan="4" class="text-center py-4">Tidak ada barang tersedia</td></tr>`);
            } else {
                paginatedProducts.forEach(product => {
                    productsList.append(`
                        <tr data-product-id="${product.id}">
                            <td>${product.name}</td>
                            <td class="text-right">${formatNumber(product.price_kg)}</td>
                            <td class="text-right">${formatNumber(product.price_cbm)}</td>
                            <td class="text-center">
                                <button type="button" class="btn btn-sm btn-primary add-product-btn" data-product-id="${product.id}">
                                    <i class="fas fa-plus mr-1"></i> Tambah
                                </button>
                            </td>
                        </tr>
                    `);
                });
            }
            
            // Update pagination info
            $('#product-pagination-info').text(`Menampilkan ${startIndex + 1}-${Math.min(endIndex, filteredProducts.length)} dari ${filteredProducts.length} barang`);
            
            // Render pagination
            renderPagination(totalPages);
            
            // Attach event listeners to add buttons
            $('.add-product-btn').on('click', function() {
                const productId = parseInt($(this).data('product-id'));
                const product = warehouseProducts.find(p => p.id === productId);
                if (product) {
                    addProductToTable(product);
                }
            });
        }
        
        // Render pagination controls
        function renderPagination(totalPages) {
            const pagination = $('#product-pagination');
            pagination.empty();
            
            // Previous button
            pagination.append(`
                <button class="btn btn-sm ${currentPage === 1 ? 'btn-disabled' : 'btn-secondary'}" 
                        ${currentPage === 1 ? 'disabled' : ''} data-page="prev">
                    <i class="fas fa-chevron-left"></i>
                </button>
            `);
            
            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, startPage + 4);
            
            for (let i = startPage; i <= endPage; i++) {
                pagination.append(`
                    <button class="btn btn-sm ${i === currentPage ? 'btn-primary' : 'btn-secondary'}" data-page="${i}">
                        ${i}
                    </button>
                `);
            }
            
            // Next button
            pagination.append(`
                <button class="btn btn-sm ${currentPage === totalPages ? 'btn-disabled' : 'btn-secondary'}" 
                        ${currentPage === totalPages ? 'disabled' : ''} data-page="next">
                    <i class="fas fa-chevron-right"></i>
                </button>
            `);
            
            // Attach event listeners to pagination buttons
            pagination.find('button').on('click', function() {
                if ($(this).attr('disabled')) return;
                
                const page = $(this).data('page');
                if (page === 'prev') {
                    currentPage--;
                } else if (page === 'next') {
                    currentPage++;
                } else {
                    currentPage = page;
                }
                
                renderProducts();
            });
        }
        
        // Add a product to the "List Barang" table
        function addProductToTable(product) {
            const rowIndex = detailCounter++;
            const productImageUrl = product.image_url || '/images/no-image.jpg';
            
            // Buat row produk dengan format yang lebih bersih dan lebar input yang lebih baik
            const row = `
                <tr data-index="${rowIndex}" data-product-id="${product.id}" class="product-row">
                   
                    <td class="text-center" style="min-width: 80px;">
                        <div class="flex flex-col items-center">
                            <img src="${productImageUrl}" alt="${product.name}" class="h-14 w-14 rounded object-cover mb-1">
                            <input type="file" name="barang[${rowIndex}][product_image]" class="hidden product-image-upload" accept="image/*">
                            <button type="button" class="btn btn-xs btn-secondary upload-image-btn">
                                <i class="fas fa-upload"></i> Ganti
                            </button>
                        </div>
                    </td>
                    <td>
                        ${product.name}
                        <input type="hidden" name="barang[${rowIndex}][product_id]" value="${product.id}">
                        <input type="hidden" name="barang[${rowIndex}][name]" value="${product.name}">
                        <input type="hidden" name="barang[${rowIndex}][price_kg]" value="${product.price_kg || 0}">
                        <input type="hidden" name="barang[${rowIndex}][price_cbm]" value="${product.price_cbm || 0}">
                    </td>
                    <td class="text-center" style="min-width: 100px;">
                        <input type="text" class="input input-sm w-full" name="barang[${rowIndex}][ctn]" value="" min="0.01" placeholder="CTN">
                    </td>
                    <td class="text-center" style="min-width: 100px;">
                        <input type="number" class="input input-sm w-full qty-per-ctn" name="barang[${rowIndex}][qty_per_ctn]" value="1" min="1" step="1">
                    </td>
                    <td class="text-center" style="min-width: 100px;">
                        <input type="number" class="input input-sm w-full total-ctns" name="barang[${rowIndex}][ctns]" value="1" min="1" step="1">
                    </td>
                    <td class="text-center" style="min-width: 100px;">
                        <input type="text" class="input input-sm w-full total-qty" name="barang[${rowIndex}][qty]" value="1" readonly>
                    </td>
                    <td class="text-center" style="min-width: 100px;">
                        <input type="number" class="input input-sm w-full dimension-input" name="barang[${rowIndex}][length]" value="" min="0.01" step="0.01" placeholder="P">
                    </td>
                    <td class="text-center" style="min-width: 100px;">
                        <input type="number" class="input input-sm w-full dimension-input" name="barang[${rowIndex}][width]" value="" min="0.01" step="0.01" placeholder="L">
                    </td>
                    <td class="text-center" style="min-width: 100px;">
                        <input type="number" class="input input-sm w-full dimension-input" name="barang[${rowIndex}][high]" value="" min="0.01" step="0.01" placeholder="T">
                    </td>
                    <td class="text-center" style="min-width: 110px;">
                        <input type="number" class="input input-sm w-full gw-per-ctn" name="barang[${rowIndex}][gw_per_ctn]" value="" min="0.01" step="0.01">
                    </td>
                    <td class="text-center" style="min-width: 110px;">
                        <input type="text" class="input input-sm w-full volume-display" readonly value="0,00">
                        <input type="hidden" class="volume" name="barang[${rowIndex}][volume]" value="0">
                    </td>
                    <td class="text-center" style="min-width: 110px;">
                        <input type="text" class="input input-sm w-full total-gw-display" readonly value="0,00">
                        <input type="hidden" class="total-gw" name="barang[${rowIndex}][total_gw]" value="0">
                    </td>
                    <td class="text-center">
                        <button type="button" class="btn btn-xs btn-icon btn-danger delete-barang">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `;
            
            $('#barangList').append(row);
            $('#emptyProductState').hide();
            
            // Attach event listeners to the new row
            attachRowEventListeners($(`#barangList tr[data-index="${rowIndex}"]`));
            
            // Calculate totals
            calculateTotals();
        }
        
        // Create a function to duplicate product row for volume calculation
        function duplicateRowForVolume(originalRow) {
            const originalIndex = originalRow.data('index');
            const productId = originalRow.data('product-id');
            const productName = originalRow.find('input[name$="[name]"]').val();
            const priceCbm = parseFloat(originalRow.find('input[name$="[price_cbm]"]').val()) || 0;
            const rowIndex = detailCounter++;
            
            // Calculate original row's volume
            const length = parseFloat(originalRow.find('input[name$="[length]"]').val()) || 0;
            const width = parseFloat(originalRow.find('input[name$="[width]"]').val()) || 0;
            const height = parseFloat(originalRow.find('input[name$="[high]"]').val()) || 0;
            const ctns = parseFloat(originalRow.find('.total-ctns').val()) || 0;
            
            // Volume in cubic meters (L*W*H)
            const volume = length * width * height * ctns;
            const shippingCost = volume * priceCbm;
            
            const volumeRow = `
                <tr data-index="${rowIndex}" data-original-index="${originalIndex}" data-product-id="${productId}" class="calculation-row volume-calculation bg-blue-50 dark:bg-slate-700">
                   
                    <td>
                        <div class="text-xs font-medium">Perhitungan Volume - ${productName}</div>
                        <input type="hidden" name="calculations[${rowIndex}][product_id]" value="${productId}">
                        <input type="hidden" name="calculations[${rowIndex}][type]" value="volume">
                        <input type="hidden" name="calculations[${rowIndex}][original_index]" value="${originalIndex}">
                    </td>
                    <td colspan="4" class="text-center">
                        <div class="text-xs font-semibold">Volume × Harga/CBM</div>
                        <span class="text-sm">${volume.toFixed(6)} m³ × Rp ${formatNumber(priceCbm)}</span>
                    </td>
                    <td colspan="3" class="text-center font-medium">
                        <span class="text-sm">Rp ${formatNumber(shippingCost)}</span>
                        <input type="hidden" name="calculations[${rowIndex}][volume]" value="${volume.toFixed(6)}">
                        <input type="hidden" name="calculations[${rowIndex}][price_cbm]" value="${priceCbm}">
                        <input type="hidden" name="calculations[${rowIndex}][cost]" value="${shippingCost}">
                    </td>
                    <td colspan="2" class="text-right">
                        <div class="text-xs font-semibold">${formatNumber(volume)} m³</div>
                    </td>
                    <td class="text-center">
                        <button type="button" class="btn btn-xs btn-icon btn-danger delete-calculation">
                            <i class="fas fa-times"></i>
                        </button>
                    </td>
                </tr>
            `;
            
            // Insert after the original row
            originalRow.after(volumeRow);
            
            // Update totals
            calculateTotals();
            
            return $(volumeRow);
        }
        
        // Create a function to duplicate product row for weight calculation
        function duplicateRowForWeight(originalRow) {
            const originalIndex = originalRow.data('index');
            const productId = originalRow.data('product-id');
            const productName = originalRow.find('input[name$="[name]"]').val();
            const priceKg = parseFloat(originalRow.find('input[name$="[price_kg]"]').val()) || 0;
            const rowIndex = detailCounter++;
            
            // Calculate original row's weight
            const gwPerCtn = parseFloat(originalRow.find('.gw-per-ctn').val()) || 0;
            const ctns = parseFloat(originalRow.find('.total-ctns').val()) || 0;
            
            // Total GW in kg
            const totalGw = gwPerCtn * ctns;
            const shippingCost = totalGw * priceKg;
            
            const weightRow = `
                <tr data-index="${rowIndex}" data-original-index="${originalIndex}" data-product-id="${productId}" class="calculation-row weight-calculation bg-green-50 dark:bg-slate-700">
                   
                    <td>
                        <div class="text-xs font-medium">Perhitungan Berat - ${productName}</div>
                        <input type="hidden" name="calculations[${rowIndex}][product_id]" value="${productId}">
                        <input type="hidden" name="calculations[${rowIndex}][type]" value="weight">
                        <input type="hidden" name="calculations[${rowIndex}][original_index]" value="${originalIndex}">
                    </td>
                    <td colspan="4" class="text-center">
                        <div class="text-xs font-semibold">Berat × Harga/KG</div>
                        <span class="text-sm">${formatNumber(totalGw)} kg × Rp ${formatNumber(priceKg)}</span>
                    </td>
                    <td colspan="3" class="text-center font-medium">
                        <span class="text-sm">Rp ${formatNumber(shippingCost)}</span>
                        <input type="hidden" name="calculations[${rowIndex}][total_gw]" value="${totalGw.toFixed(2)}">
                        <input type="hidden" name="calculations[${rowIndex}][price_kg]" value="${priceKg}">
                        <input type="hidden" name="calculations[${rowIndex}][cost]" value="${shippingCost}">
                    </td>
                    <td colspan="2" class="text-right">
                        <div class="text-xs font-semibold">${formatNumber(totalGw)} kg</div>
                    </td>
                    <td class="text-center">
                        <button type="button" class="btn btn-xs btn-icon btn-danger delete-calculation">
                            <i class="fas fa-times"></i>
                        </button>
                    </td>
                </tr>
            `;
            
            // Insert after the original row
            originalRow.after(weightRow);
            
            // Update totals
            calculateTotals();
            
            return $(weightRow);
        }
        
        // Attach event listeners to a row
        function attachRowEventListeners(row) {
            // Quantity calculations
            row.find('.qty-per-ctn, .total-ctns').on('input', function() {
                const qtyPerCtn = parseFloat(row.find('.qty-per-ctn').val()) || 0;
                const totalCtns = parseFloat(row.find('.total-ctns').val()) || 0;
                const totalQty = qtyPerCtn * totalCtns;
                
                row.find('.total-qty').val(totalQty);
                
                // Update GW if GW per CTN is set
                const gwPerCtn = parseFloat(row.find('.gw-per-ctn').val()) || 0;
                if (gwPerCtn > 0) {
                    const totalGw = gwPerCtn * totalCtns;
                    row.find('.total-gw').val(totalGw.toFixed(2));
                }
                
                // Update any calculation rows that depend on this row
                updateCalculationRows(row);
                
                calculateTotals();
            });
            
            // Dimension calculations for volume
            row.find('.dimension-input').on('input', function() {
                const length = parseFloat(row.find('input[name$="[length]"]').val()) || 0;
                const width = parseFloat(row.find('input[name$="[width]"]').val()) || 0;
                const height = parseFloat(row.find('input[name$="[high]"]').val()) || 0;
                
                // Volume in cubic meters (convert from cm to m)
                const volumeCbm = length * width * height;
                row.find('.volume').val(volumeCbm.toFixed(6));
                
                // Update any calculation rows that depend on this row
                updateCalculationRows(row);
                
                calculateTotals();
            });
            
            // GW calculations
            row.find('.gw-per-ctn').on('input', function() {
                const gwPerCtn = parseFloat($(this).val()) || 0;
                const totalCtns = parseFloat(row.find('.total-ctns').val()) || 0;
                const totalGw = gwPerCtn * totalCtns;
                
                row.find('.total-gw').val(totalGw.toFixed(2));
                
                // Update any calculation rows that depend on this row
                updateCalculationRows(row);
                
                calculateTotals();
            });
            
            // Image upload button click handler - perbaikan
            row.find('.upload-image-btn').on('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                const fileInput = row.find('.product-image-upload');
                fileInput.click();
            });
            
            // Image file selected handler - perbaikan
            row.find('.product-image-upload').on('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        row.find('img').attr('src', e.target.result);
                    };
                    reader.readAsDataURL(file);
                }
            });
            
            // Delete button
            row.find('.delete-barang').on('click', function() {
                const rowIndex = row.data('index');
                
                // Also remove any calculation rows related to this product row
                $(`.calculation-row[data-original-index="${rowIndex}"]`).remove();
                
                row.remove();
                calculateTotals();
            });
            
            // Volume calculation button
            row.find('.duplicate-volume-barang').on('click', function() {
                duplicateRowForVolume(row);
            });
            
            // Weight calculation button
            row.find('.duplicate-weight-barang').on('click', function() {
                duplicateRowForWeight(row);
            });
        }
        
        // Update calculation rows when original row changes
        function updateCalculationRows(originalRow) {
            const rowIndex = originalRow.data('index');
            const productId = originalRow.data('product-id');
            
            // Find all calculation rows that reference this row
            $(`.calculation-row[data-original-index="${rowIndex}"]`).each(function() {
                const calcRow = $(this);
                const calcType = calcRow.find('input[name$="[type]"]').val();
                
                if (calcType === 'volume') {
                    // Recalculate volume-based calculation
                    const length = parseFloat(originalRow.find('input[name$="[length]"]').val()) || 0;
                    const width = parseFloat(originalRow.find('input[name$="[width]"]').val()) || 0;
                    const height = parseFloat(originalRow.find('input[name$="[high]"]').val()) || 0;
                    const ctns = parseFloat(originalRow.find('.total-ctns').val()) || 0;
                    const priceCbm = parseFloat(originalRow.find('input[name$="[price_cbm]"]').val()) || 0;
                    
                    // Volume in cubic meters
                    const volume = length * width * height * ctns
                    const shippingCost = volume * priceCbm;
                    
                    // Update the calculation row
                    calcRow.find('span.text-sm').text(`${volume.toFixed(6)} m³ × Rp ${formatNumber(priceCbm)}`);
                    calcRow.find('span.text-sm:eq(1)').text(`Rp ${formatNumber(shippingCost)}`);
                    calcRow.find('div.text-xs.font-semibold:eq(1)').text(`${formatNumber(volume)} m³`);
                    
                    // Update hidden inputs
                    calcRow.find('input[name$="[volume]"]').val(volume.toFixed(6));
                    calcRow.find('input[name$="[cost]"]').val(shippingCost);
                    
                } else if (calcType === 'weight') {
                    // Recalculate weight-based calculation
                    const gwPerCtn = parseFloat(originalRow.find('.gw-per-ctn').val()) || 0;
                    const ctns = parseFloat(originalRow.find('.total-ctns').val()) || 0;
                    const priceKg = parseFloat(originalRow.find('input[name$="[price_kg]"]').val()) || 0;
                    
                    // Total GW in kg
                    const totalGw = gwPerCtn * ctns;
                    const shippingCost = totalGw * priceKg;
                    
                    // Update the calculation row
                    calcRow.find('span.text-sm').text(`${formatNumber(totalGw)} kg × Rp ${formatNumber(priceKg)}`);
                    calcRow.find('span.text-sm:eq(1)').text(`Rp ${formatNumber(shippingCost)}`);
                    calcRow.find('div.text-xs.font-semibold').text(`${formatNumber(totalGw)} kg`);
                    
                    // Update hidden inputs
                    calcRow.find('input[name$="[total_gw]"]').val(totalGw.toFixed(2));
                    calcRow.find('input[name$="[cost]"]').val(shippingCost);
                }
            });
        }
        
        // Delete calculation row
        $(document).on('click', '.delete-calculation', function() {
            $(this).closest('tr').remove();
            calculateTotals();
        });
        
        // Calculate total amounts with support for calculation rows
        function calculateTotals() {
            let totalCtns = 0;
            let totalQty = 0;
            let totalVolume = 0;
            let totalGw = 0;
            let totalShippingCost = 0;
            
            // Count only from product rows, not calculation rows
            $('.product-row').each(function() {
                const ctns = parseFloat($(this).find('.total-ctns').val()) || 0;
                const qty = parseFloat($(this).find('.total-qty').val()) || 0;
                const volume = parseFloat($(this).find('.volume').val()) || 0;
                const gw = parseFloat($(this).find('.total-gw').val()) || 0;
                
                totalCtns += ctns;
                totalQty += qty;
                totalVolume += volume;
                totalGw += gw;
                
                // Debug info
                console.log(`Row: CTN=${ctns}, Vol=${volume}, GW=${gw}`);
            });
            
            console.log(`Totals: CTNs=${totalCtns}, Volume=${totalVolume}, GW=${totalGw}`);
            
            // Update display fields
            $('#carton_display').val(formatNumber(totalCtns));
            $('#gw_display').val(formatNumber(totalGw));
            $('#volume_display').val(formatNumber(totalVolume));
            $('#cbm_display').val(formatNumber(totalVolume)); // CBM is same as volume in m³
            
            // Update kalkulasi ongkir fields
            $('#total_volume_display').text(formatNumber(totalVolume));
            $('#total_weight_display').text(formatNumber(totalGw));
            
            // Update kalkulasi ongkir
            updateShippingCostCalculation();
        }
        
        // Calculate fees and biaya
        function calculateFees() {
            let totalFees = 0;
            
            $('[data-fee="true"]').each(function() {
                totalFees += parseNumberFromFormatted($(this).val()) || 0;
            });
            
            // Biaya is the total of all fees
            $('#biaya').val(formatNumber(totalFees));
            
            // Calculate nilai_biaya
            const nilaiBarang = parseNumberFromFormatted($('#nilai').val()) || 0;
            $('#nilai_biaya').val(formatNumber(nilaiBarang + totalFees));
            
            // Update biaya kirim
            $('#biaya_kirim').val(formatNumber(totalFees));
            
            // Update PPN and grand total
            calculatePPN();
            calculateGrandTotal();
        }
        
        // Calculate PPN total
        function calculatePPN() {
            const biayaKirim = parseNumberFromFormatted($('#biaya_kirim').val()) || 0;
            const ppnRate = parseFloat($('#ppn').val()) || 0;
            const ppnAmount = biayaKirim * (ppnRate / 100);
            
            $('#ppn_total').val(formatNumber(ppnAmount));
        }
        
        // Calculate grand total
        function calculateGrandTotal() {
            const biayaKirim = parseNumberFromFormatted($('#biaya_kirim').val()) || 0;
            const pph = parseNumberFromFormatted($('#pph').val()) || 0;
            const ppnTotal = parseNumberFromFormatted($('#ppn_total').val()) || 0;
            
            const grandTotal = biayaKirim + pph + ppnTotal;
            $('#grand_total').val(formatNumber(grandTotal));
        }
        
        // Handle shipping type change to update invoice number
        $('#shipping_type').on('change', function() {
            const shippingType = $(this).val();
            $.get(`/api/shippings/generate-invoice?type=${shippingType}`, function(data) {
                $('#invoice').val(data.invoice);
            });
        });
        
        // Handle TOP (Terms of Payment) change to calculate due date
        $('#top, #transaction_date').on('change', function() {
            const transactionDate = $('#transaction_date').val();
            const top = parseInt($('#top').val()) || 0;
            
            if (transactionDate && top > 0) {
                const dueDate = new Date(transactionDate);
                dueDate.setDate(dueDate.getDate() + top);
                
                const year = dueDate.getFullYear();
                const month = String(dueDate.getMonth() + 1).padStart(2, '0');
                const day = String(dueDate.getDate()).padStart(2, '0');
                
                $('#due_date').val(`${year}-${month}-${day}`);
            }
        });
        
        // Enhanced function to update marking code
        function updateMarkingCode() {
            const mitraCode = $('#mitra_id option:selected').data('marking-code') || '';
            const marketingCode = $('#marketing_id option:selected').data('code') || '';
            const serviceType = $('#service').val() || '';
            
            if (mitraCode && marketingCode && serviceType) {
                const markingCode = `${mitraCode}/${marketingCode}/${serviceType}`;
                $('#marking').val(markingCode);
            }
        }
        
     
        $('#mitra_id').on('change', function() {
            const mitraId = $(this).val();
            updateMarkingCode();
            
            if (mitraId) {
                // Load warehouses for this mitra
                $.get(`/api/mitras/${mitraId}/warehouses`, function(data) {
                    const warehouseSelect = $('#warehouse_id');
                    warehouseSelect.empty().append('<option value="">Pilih Gudang</option>');
                    
                    data.forEach(warehouse => {
                        warehouseSelect.append(`<option value="${warehouse.id}">${warehouse.name} - ${warehouse.products_count} item</option>`);
                    });
                    
                    warehouseSelect.prop('disabled', false);
                });
                
                // Ambil data harga ongkir dari mitra
                $.get(`/api/mitras/${mitraId}`, function(data) {
                    // Set nilai default untuk input harga ongkir
                    mitraOngkirCbm = parseFloat(data.harga_ongkir_cbm) || 0;
                    mitraOngkirWg = parseFloat(data.harga_ongkir_wg) || 0;
                    
                    $('#harga_ongkir_cbm').val(mitraOngkirCbm);
                    $('#harga_ongkir_wg').val(mitraOngkirWg);
                    
                    // Update tampilan kalkulasi ongkir
                    updateShippingCostCalculation();
                });
                
                // Hide the warehouse products section when mitra changes
                $('#warehouseProductsSection').addClass('hidden');
                $('#warehouseProductsList').empty();
            } else {
                $('#warehouse_id').empty().append('<option value="">Pilih Gudang</option>').prop('disabled', true);
                $('#warehouseProductsSection').addClass('hidden');
                
                // Reset harga ongkir
                mitraOngkirCbm = 0;
                mitraOngkirWg = 0;
                $('#harga_ongkir_cbm').val(0);
                $('#harga_ongkir_wg').val(0);
            }
        });

        // Handle customer selection to update marketing and potentially marking code
        $('#customer_id').on('change', function() {
            const customerId = $(this).val();
            const marketingId = $(this).find('option:selected').data('marketing-id');
            
            if (marketingId) {
                $('#marketing_id').val(marketingId);
                $('#marketing_id').trigger('change');
            } else {
                $('#marketing_id').val('').prop('disabled', true);
                updateMarkingCode();
            }
            
            // Rest of your existing customer_id change handler...
            if (customerId) {
                $.get(`/api/customers/${customerId}/banks`, function(data) {
                    const bankSelect = $('#bank_id');
                    bankSelect.empty().append('<option value="">Pilih Bank</option>');
                    
                    if (data.length > 0) {
                        data.forEach(bank => {
                            const isDefault = bank.is_default ? ' (Default)' : '';
                            bankSelect.append(`
                                <option value="${bank.id}" ${bank.is_default ? 'selected' : ''}>
                                    ${bank.bank.name} - ${bank.rek_name} - ${bank.rek_no}${isDefault}
                                </option>
                            `);
                        });
                    } else {
                        bankSelect.append('<option value="" disabled>Customer tidak memiliki rekening bank</option>');
                    }
                });
            } else {
                $('#bank_id').empty().append('<option value="">Pilih Bank</option>');
            }
        });
        
        // Update marking code when marketing changes
        $('#marketing_id').on('change', function() {
            updateMarkingCode();
        });
        
        // Update marking code when service changes
        $('#service').on('change', function() {
            updateMarkingCode();
        });
        
        // Initialize form
        $('#shipping_type').trigger('change'); // Generate initial invoice number

        // Variabel untuk menyimpan harga ongkir dari mitra
        let mitraOngkirCbm = 0;
        let mitraOngkirWg = 0;

        // Handle mitra selection - tambahkan pengambilan harga ongkir
        $('#mitra_id').on('change', function() {
            const mitraId = $(this).val();

        // Handle mitra selection - tambahkan pengambilan harga ongkir
        $('#mitra_id').on('change', function() {
            const mitraId = $(this).val();
            const markingCode = $(this).find('option:selected').data('marking-code') || '';
            
            $('#marking').val(markingCode);
            
            if (mitraId) {
                // Load warehouses for this mitra
                $.get(`/api/mitras/${mitraId}/warehouses`, function(data) {
                    const warehouseSelect = $('#warehouse_id');
                    warehouseSelect.empty().append('<option value="">Pilih Gudang</option>');
                    
                    data.forEach(warehouse => {
                        warehouseSelect.append(`<option value="${warehouse.id}">${warehouse.name} - ${warehouse.products_count} item</option>`);
                    });
                    
                    warehouseSelect.prop('disabled', false);
                });
                
                // Ambil data harga ongkir dari mitra
                $.get(`/api/mitras/${mitraId}`, function(data) {
                    // Set nilai default untuk input harga ongkir
                    mitraOngkirCbm = parseFloat(data.harga_ongkir_cbm) || 0;
                    mitraOngkirWg = parseFloat(data.harga_ongkir_wg) || 0;
                    
                    $('#harga_ongkir_cbm').val(mitraOngkirCbm);
                    $('#harga_ongkir_wg').val(mitraOngkirWg);
                    
                    // Update tampilan kalkulasi ongkir
                    updateShippingCostCalculation();
                });
                
                // Hide the warehouse products section when mitra changes
                $('#warehouseProductsSection').addClass('hidden');
                $('#warehouseProductsList').empty();
            } else {
                $('#warehouse_id').empty().append('<option value="">Pilih Gudang</option>').prop('disabled', true);
                $('#warehouseProductsSection').addClass('hidden');
                
                // Reset harga ongkir
                mitraOngkirCbm = 0;
                mitraOngkirWg = 0;
                $('#harga_ongkir_cbm').val(0);
                $('#harga_ongkir_wg').val(0);
            }
        });

        // Revisi tabel barang untuk menampilkan perhitungan volume dan total_gw
        function addProductToTable(product) {
            const rowIndex = detailCounter++;
            const productImageUrl = product.image_url || '/images/no-image.jpg';
            
            // Buat row produk dengan kolom perhitungan volume dan total_gw
            const row = `
                <tr data-index="${rowIndex}" data-product-id="${product.id}" class="product-row">
                   
                    <td class="text-center" style="min-width: 80px;">
                        <div class="flex flex-col items-center">
                            <img src="${productImageUrl}" alt="${product.name}" class="h-14 w-14 rounded object-cover mb-1">
                            <input type="file" name="barang[${rowIndex}][product_image]" class="hidden product-image-upload" accept="image/*">
                            <button type="button" class="btn btn-xs btn-secondary upload-image-btn">
                                <i class="fas fa-upload"></i> Ganti
                            </button>
                        </div>
                    </td>
                    <td>
                        ${product.name}
                        <input type="hidden" name="barang[${rowIndex}][product_id]" value="${product.id}">
                        <input type="hidden" name="barang[${rowIndex}][name]" value="${product.name}">
                        <input type="hidden" name="barang[${rowIndex}][price_kg]" value="${product.price_kg || 0}">
                        <input type="hidden" name="barang[${rowIndex}][price_cbm]" value="${product.price_cbm || 0}">
                    </td>
                    <td class="text-center">
                        <input type="text" class="input input-sm" name="barang[${rowIndex}][ctn]" value="" placeholder="CTN">
                    </td>
                    <td class="text-center">
                        <input type="number" class="input input-sm qty-per-ctn" name="barang[${rowIndex}][qty_per_ctn]" value="1" min="1" step="1">
                    </td>
                    <td class="text-center">
                        <input type="number" class="input input-sm total-ctns" name="barang[${rowIndex}][ctns]" value="1" min="1" step="1">
                    </td>
                    <td class="text-center">
                        <input type="text" class="input input-sm total-qty" name="barang[${rowIndex}][qty]" value="1" readonly>
                    </td>
                    <td class="text-center">
                        <div class="flex flex-col">
                            <input type="number" class="input input-sm dimension-input" name="barang[${rowIndex}][length]" value="" min="0.01" step="0.01">
                        </div>
                    </td>
                    <td class="text-center">
                        <div class="flex flex-col">
                            <input type="number" class="input input-sm dimension-input" name="barang[${rowIndex}][width]" value="" min="0.01" step="0.01">
                        </div>
                    </td>
                    <td class="text-center">
                        <div class="flex flex-col">
                            <input type="number" class="input input-sm dimension-input" name="barang[${rowIndex}][high]" value="" min="0.01" step="0.01">
                        </div>
                    </td>
                    <td class="text-center">
                        <div class="flex flex-col">
                            <input type="number" class="input input-sm gw-per-ctn" name="barang[${rowIndex}][gw_per_ctn]" value="" min="0.01" step="0.01">
                        </div>
                    </td>
                    <td class="text-center volume-cell">
                        <div class="flex flex-col">
                            <input type="text" class="input input-sm volume-display" readonly value="0,00">
                            <input type="hidden" class="volume" name="barang[${rowIndex}][volume]" value="0">
                        </div>
                    </td>
                    <td class="text-center weight-cell">
                        <div class="flex flex-col">
                            <input type="text" class="input input-sm total-gw-display" readonly value="0,00">
                            <input type="hidden" class="total-gw" name="barang[${rowIndex}][total_gw]" value="0">
                        </div>
                    </td>
                    <td class="text-center">
                        <button type="button" class="btn btn-xs btn-icon btn-danger delete-barang">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `;
            
            $('#barangList').append(row);
            $('#emptyProductState').hide();
            
            // Attach event listeners to the new row
            attachRowEventListeners($(`#barangList tr[data-index="${rowIndex}"]`));
            
            // Calculate totals
            calculateTotals();
        }

        // Attach event listeners ke row dengan perubahan untuk update perhitungan
        function attachRowEventListeners(row) {
            // Quantity calculations
            row.find('.qty-per-ctn, .total-ctns').on('input', function() {
                const qtyPerCtn = parseFloat(row.find('.qty-per-ctn').val()) || 0;
                const totalCtns = parseFloat(row.find('.total-ctns').val()) || 0;
                const totalQty = qtyPerCtn * totalCtns;
                
                row.find('.total-qty').val(totalQty);
                
                // Recalculate GW
                calculateRowGW(row);
                
                // Recalculate Volume
                calculateRowVolume(row);
                
                // Update totals
                calculateTotals();
                
                // Update shipping cost calculation
                updateShippingCostCalculation();
            });
            
            // Dimension calculations for volume
            row.find('.dimension-input').on('input', function() {
                // Calculate volume
                calculateRowVolume(row);
                
                // Update totals
                calculateTotals();
                
                // Update shipping cost calculation
                updateShippingCostCalculation();
            });
            
            // GW calculations
            row.find('.gw-per-ctn').on('input', function() {
                // Calculate GW
                calculateRowGW(row);
                
                // Update totals
                calculateTotals();
                
                // Update shipping cost calculation
                updateShippingCostCalculation();
            });
            
            // Image upload button click handler - perbaikan
            row.find('.upload-image-btn').on('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                const fileInput = row.find('.product-image-upload');
                fileInput.click();
            });
            
            // Image file selected handler - perbaikan
            row.find('.product-image-upload').on('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    const imgElement = $(this).closest('td').find('img');
                    
                    reader.onload = function(e) {
                        imgElement.attr('src', e.target.result);
                    };
                    
                    reader.readAsDataURL(file);
                }
            });
            
            // Delete button
            row.find('.delete-barang').on('click', function() {
                row.remove();
                
                if ($('#barangList tr').length === 0) {
                    $('#emptyProductState').show();
                }
                
                calculateTotals();
                updateShippingCostCalculation();
            });
        }

        // Function to calculate row GW
        function calculateRowGW(row) {
            const gwPerCtn = parseFloat(row.find('.gw-per-ctn').val()) || 0;
            const totalCtns = parseFloat(row.find('.total-ctns').val()) || 0;
            const totalGw = gwPerCtn * totalCtns;
            
            row.find('.total-gw').val(totalGw.toFixed(2));
            row.find('.total-gw-display').val(formatNumber(totalGw));
        }

        // Function to calculate row volume
        function calculateRowVolume(row) {
            const length = parseFloat(row.find('input[name$="[length]"]').val()) || 0;
            const width = parseFloat(row.find('input[name$="[width]"]').val()) || 0;
            const height = parseFloat(row.find('input[name$="[high]"]').val()) || 0;
            const totalCtns = parseFloat(row.find('.total-ctns').val()) || 0;
            
            // Volume in cubic meters (L*W*H in cm / 1,000,000) x jumlah carton
            const volumeCbm = length * width * height * totalCtns;
            
            row.find('.volume').val(volumeCbm.toFixed(6));
            row.find('.volume-display').val(formatNumber(volumeCbm));
            
            return volumeCbm;
        }

        // Calculate all totals
        function calculateTotals() {
            let totalCtns = 0;
            let totalQty = 0;
            let totalVolume = 0;
            let totalGw = 0;
            
            // Count from product rows
            $('.product-row').each(function() {
                const ctns = parseFloat($(this).find('.total-ctns').val()) || 0;
                const qty = parseFloat($(this).find('.total-qty').val()) || 0;
                const volume = parseFloat($(this).find('.volume').val()) || 0;
                const gw = parseFloat($(this).find('.total-gw').val()) || 0;
                
                totalCtns += ctns;
                totalQty += qty;
                totalVolume += volume;
                totalGw += gw;
                
                // Debug info
                console.log(`Row: CTN=${ctns}, Vol=${volume}, GW=${gw}`);
            });
            
            console.log(`Totals: CTNs=${totalCtns}, Volume=${totalVolume}, GW=${totalGw}`);
            
            // Update display fields
            $('#carton_display').val(formatNumber(totalCtns));
            $('#gw_display').val(formatNumber(totalGw));
            $('#volume_display').val(formatNumber(totalVolume));
            $('#cbm_display').val(formatNumber(totalVolume)); // CBM is same as volume in m³
            
            // Update kalkulasi ongkir fields
            $('#total_volume_display').text(formatNumber(totalVolume));
            $('#total_weight_display').text(formatNumber(totalGw));
            
            // Update kalkulasi ongkir
            updateShippingCostCalculation();
        }

        // Function untuk update kalkulasi ongkir
        function updateShippingCostCalculation() {
            const totalVolume = parseNumberFromFormatted($('#volume_display').val()) || 0;
            const totalWeight = parseNumberFromFormatted($('#gw_display').val()) || 0;
            const hargaOngkirCbm = parseFloat($('#harga_ongkir_cbm').val()) || 0;
            const hargaOngkirWg = parseFloat($('#harga_ongkir_wg').val()) || 0;
            const maxWeight = parseFloat($('#max_weight').val()) || 0;
            
            // Hitung biaya berdasarkan volume
            const volumeCost = totalVolume * hargaOngkirCbm;
            $('#volume_cost_display').text(`Rp ${formatNumber(volumeCost)}`);
            
            // Hitung biaya berdasarkan berat
            const weightCost = totalWeight * hargaOngkirWg;
            $('#weight_cost_display').text(`Rp ${formatNumber(weightCost)}`);
            
            // Tentukan metode kalkulasi berdasarkan regulasi max_wg
            let selectedMethod = '';
            let selectedCost = 0;

            // Styling untuk metode yang dipilih
            $('.bg-blue-50').removeClass('border-blue-500 border-2');
            $('.bg-green-50').removeClass('border-green-500 border-2');

            // Otomatis tentukan berdasarkan regulasi max_wg
            if (maxWeight === 0) {
                // Jika max_weight tidak ditentukan (0), gunakan perhitungan yang lebih tinggi
                if (volumeCost >= weightCost) {
                    selectedMethod = 'volume';
                    selectedCost = volumeCost;
                    $('.bg-blue-50').addClass('border-blue-500 border-2');
                } else {
                    selectedMethod = 'weight';
                    selectedCost = weightCost;
                    $('.bg-green-50').addClass('border-green-500 border-2');
                }
            } else if (totalWeight <= maxWeight) {
                // Jika total berat <= max_weight, gunakan perhitungan CBM
                selectedMethod = 'volume';
                selectedCost = volumeCost;
                $('.bg-blue-50').addClass('border-blue-500 border-2');
            } else {
                // Jika total berat > max_weight, gunakan perhitungan berat
                selectedMethod = 'weight';
                selectedCost = weightCost;
                $('.bg-green-50').addClass('border-green-500 border-2');
            }

            // Update pesan juga
            let message = '';
            if (selectedMethod === 'volume') {
                message = `<span class="text-blue-700 font-medium">Menggunakan perhitungan Volume</span>: ${formatNumber(totalVolume)} m³ × Rp ${formatNumber(hargaOngkirCbm)} = <span class="font-bold">Rp ${formatNumber(selectedCost)}</span><br>`;
                
                if (maxWeight === 0) {
                    message += `<span class="mt-1 block text-xs opacity-80">Alasan: Tidak ada batas maksimum berat yang ditentukan dan nilai ongkir volume lebih tinggi</span>`;
                } else {
                    message += `<span class="mt-1 block text-xs opacity-80">Alasan: Berat total ${formatNumber(totalWeight)} kg masih di bawah batas maksimum ${formatNumber(maxWeight)} kg</span>`;
                }
            } else {
                message = `<span class="text-green-700 font-medium">Menggunakan perhitungan Berat</span>: ${formatNumber(totalWeight)} kg × Rp ${formatNumber(hargaOngkirWg)} = <span class="font-bold">Rp ${formatNumber(selectedCost)}</span><br>`;
                
                if (maxWeight === 0) {
                    message += `<span class="mt-1 block text-xs opacity-80">Alasan: Tidak ada batas maksimum berat yang ditentukan dan nilai ongkir berat lebih tinggi</span>`;
                } else {
                    message += `<span class="mt-1 block text-xs opacity-80">Alasan: Berat total ${formatNumber(totalWeight)} kg melebihi batas maksimum ${formatNumber(maxWeight)} kg</span>`;
                }
            }
            
            $('#used_calculation_message').html(message);
            $('#selected_shipping_cost').val(formatNumber(selectedCost));
            $('#calculation_method_used').val(selectedMethod);
        }

        // Event handler untuk input harga ongkir
        $('#harga_ongkir_cbm, #harga_ongkir_wg').on('input', function() {
            updateShippingCostCalculation();
        });

        // Event handler untuk radio button metode kalkulasi
        $('input[name="calculation_method"]').on('change', function() {
            updateShippingCostCalculation();
        });

        // Event handler untuk tombol apply shipping cost
        $('#apply_shipping_cost').on('click', function() {
            const shippingCost = parseNumberFromFormatted($('#selected_shipping_cost').val()) || 0;
            
            // Reset semua field biaya
            $('[data-fee="true"]').val('0,00');
            
            // Masukkan nilai shipping cost ke komponen biaya JKT-SDA
            $('#jkt_sda').val(formatNumber(shippingCost));
            
            // Hitung ulang semua biaya
            calculateFees();
        });

        // Modifikasi fungsi calculateFees
        function calculateFees() {
            let totalFees = 0;
            
            $('[data-fee="true"]').each(function() {
                totalFees += parseNumberFromFormatted($(this).val()) || 0;
            });
            
            // Biaya is the total of all fees
            $('#biaya').val(formatNumber(totalFees));
            
            // Calculate nilai_biaya
            const nilaiBarang = parseNumberFromFormatted($('#nilai').val()) || 0;
            $('#nilai_biaya').val(formatNumber(nilaiBarang + totalFees));
            
            // Update biaya kirim
            $('#biaya_kirim').val(formatNumber(totalFees));
            
            // Update PPN and grand total
            calculatePPN();
            calculateGrandTotal();
        }

        // Calculate PPN total
        function calculatePPN() {
            const biayaKirim = parseNumberFromFormatted($('#biaya_kirim').val()) || 0;
            const ppnRate = parseFloat($('#ppn').val()) || 0;
            const ppnAmount = biayaKirim * (ppnRate / 100);
            
            $('#ppn_total').val(formatNumber(ppnAmount));
        }
        
        // Calculate grand total
        function calculateGrandTotal() {
            const biayaKirim = parseNumberFromFormatted($('#biaya_kirim').val()) || 0;
            const pph = parseNumberFromFormatted($('#pph').val()) || 0;
            const ppnTotal = parseNumberFromFormatted($('#ppn_total').val()) || 0;
            
            const grandTotal = biayaKirim + pph + ppnTotal;
            $('#grand_total').val(formatNumber(grandTotal));
        }

        // Inisialisasi form
        $('#shipping_type').trigger('change'); // Generate initial invoice number
    });

    // Handle file input untuk upload gambar
    $(document).on('click', '.upload-image-btn', function(e) {
        e.preventDefault();
        e.stopPropagation();
        $(this).closest('td').find('.product-image-upload').trigger('click');
    });

    $(document).on('change', '.product-image-upload', function() {
        const file = this.files[0];
        if (file) {
            const reader = new FileReader();
            if (file) {
                const reader = new FileReader();
                const imgElement = $(this).closest('td').find('img');
                
                reader.onload = function(e) {
                    imgElement.attr('src', e.target.result);
                };
                
                reader.readAsDataURL(file);
            }
        }
    });

    // Fungsi untuk mengupdate marking code
    function updateMarkingCode() {
        const mitraCode = $('#mitra_id option:selected').data('marking-code') || '';
        const marketingCode = $('#marketing_id option:selected').data('code') || '';
        const serviceType = $('#service').val() || '';
        
        let markingCode = '';
        
        if (mitraCode || marketingCode || serviceType) {
            const parts = [];
            if (mitraCode) parts.push(mitraCode);
            if (marketingCode) parts.push(marketingCode);
            if (serviceType) parts.push(serviceType);
            
            markingCode = parts.join('/');
        }
        
        $('#marking').val(markingCode);
    }

    // Attach event listeners for all select that affect marking code
    $('#mitra_id, #marketing_id, #service').on('change', function() {
        updateMarkingCode();
    });

    // Add event handlers for customer selection
    $('#customer_id').on('change', function() {
        const customerId = $(this).val();
        const marketingId = $(this).find('option:selected').data('marketing-id');
        
        if (marketingId) {
            $('#marketing_id').val(marketingId).prop('disabled', false);
            $('#marketing_id').trigger('change'); // Trigger change untuk update marking code
        } else {
            $('#marketing_id').val('').prop('disabled', true);
        }
        
        // Rest of your existing customer_id change handler...
    });

    // Handle mitra selection - tambahkan pengambilan max_wg
    $('#mitra_id').on('change', function() {
        const mitraId = $(this).val();
        const markingCode = $(this).find('option:selected').data('marking-code') || '';
        
        $('#marking').val(markingCode);
        
        if (mitraId) {
            // Load warehouses for this mitra
            $.get(`/api/mitras/${mitraId}/warehouses`, function(data) {
                const warehouseSelect = $('#warehouse_id');
                warehouseSelect.empty().append('<option value="">Pilih Gudang</option>');
                
                data.forEach(warehouse => {
                    warehouseSelect.append(`<option value="${warehouse.id}">${warehouse.name} - ${warehouse.products_count} item</option>`);
                });
                
                warehouseSelect.prop('disabled', false);
            });
            
            // Ambil data harga ongkir dan max_wg dari mitra
            $.get(`/api/mitras/${mitraId}`, function(data) {
                // Set nilai default untuk input harga ongkir dan max_wg
                const mitraOngkirCbm = parseFloat(data.harga_ongkir_cbm) || 0;
                const mitraOngkirWg = parseFloat(data.harga_ongkir_wg) || 0;
                const maxWeight = parseFloat(data.max_wg) || 0;
                
                $('#harga_ongkir_cbm').val(mitraOngkirCbm);
                $('#harga_ongkir_wg').val(mitraOngkirWg);
                $('#max_weight').val(maxWeight);
                $('#max_weight_display').text(formatNumber(maxWeight));
                
                console.log('Mitra data loaded:', {
                    mitraOngkirCbm,
                    mitraOngkirWg,
                    maxWeight
                });
                
                // Update tampilan kalkulasi ongkir
                updateShippingCostCalculation();
            });
            
            // Hide the warehouse products section when mitra changes
            $('#warehouseProductsSection').addClass('hidden');
            $('#warehouseProductsList').empty();
        } else {
            $('#warehouse_id').empty().append('<option value="">Pilih Gudang</option>').prop('disabled', true);
            $('#warehouseProductsSection').addClass('hidden');
            
            // Reset harga ongkir dan max_weight
            $('#harga_ongkir_cbm').val(0);
            $('#harga_ongkir_wg').val(0);
            $('#max_weight').val(0);
            $('#max_weight_display').text('0,00');
        }
        
        // Update marking code
        updateMarkingCode();
    });

    // Modifikasi event handler untuk semua komponen biaya dan ongkir
    $(document).ready(function() {
        // Event handler untuk semua komponen biaya
        $('[data-fee="true"]').on('input', function() {
            calculateFees();
        });
        
        // Event handler untuk PPH
        $('#pph').on('input', function() {
            calculateGrandTotal();
        });
        
        // Event handler untuk PPN rate
        $('#ppn').on('input', function() {
            calculatePPN();
            calculateGrandTotal();
        });
        
        // Update function untuk shipping cost calculation agar otomatis mengupdate biaya kirim
        function updateShippingCostCalculation() {
            const totalVolume = parseNumberFromFormatted($('#volume_display').val()) || 0;
            const totalWeight = parseNumberFromFormatted($('#gw_display').val()) || 0;
            const hargaOngkirCbm = parseFloat($('#harga_ongkir_cbm').val()) || 0;
            const hargaOngkirWg = parseFloat($('#harga_ongkir_wg').val()) || 0;
            const maxWeight = parseFloat($('#max_weight').val()) || 0;
            
            // Hitung biaya berdasarkan volume
            const volumeCost = totalVolume * hargaOngkirCbm;
            $('#volume_cost_display').text(`Rp ${formatNumber(volumeCost)}`);
            
            // Hitung biaya berdasarkan berat
            const weightCost = totalWeight * hargaOngkirWg;
            $('#weight_cost_display').text(`Rp ${formatNumber(weightCost)}`);
            
            // Tentukan metode kalkulasi berdasarkan regulasi max_wg
            let selectedMethod = '';
            let selectedCost = 0;
            
            // Styling untuk metode yang dipilih
            $('.bg-blue-50').removeClass('border-blue-500 border-2');
            $('.bg-green-50').removeClass('border-green-500 border-2');
            
            // Otomatis tentukan berdasarkan regulasi max_wg
            if (maxWeight === 0) {
                // Jika max_weight tidak ditentukan (0), gunakan perhitungan yang lebih tinggi
                if (volumeCost >= weightCost) {
                    selectedMethod = 'volume';
                    selectedCost = volumeCost;
                    $('.bg-blue-50').addClass('border-blue-500 border-2');
                } else {
                    selectedMethod = 'weight';
                    selectedCost = weightCost;
                    $('.bg-green-50').addClass('border-green-500 border-2');
                }
            } else if (totalWeight <= maxWeight) {
                // Jika total berat <= max_weight, gunakan perhitungan CBM
                selectedMethod = 'volume';
                selectedCost = volumeCost;
                $('.bg-blue-50').addClass('border-blue-500 border-2');
            } else {
                // Jika total berat > max_weight, gunakan perhitungan berat
                selectedMethod = 'weight';
                selectedCost = weightCost;
                $('.bg-green-50').addClass('border-green-500 border-2');
            }
            
            // Update message dan total cost
            let message = '';
            if (selectedMethod === 'volume') {
                message = `<span class="text-blue-700 font-medium">Menggunakan perhitungan Volume</span>: ${formatNumber(totalVolume)} m³ × Rp ${formatNumber(hargaOngkirCbm)} = <span class="font-bold">Rp ${formatNumber(selectedCost)}</span><br>`;
                
                if (maxWeight === 0) {
                    message += `<span class="mt-1 block text-xs opacity-80">Alasan: Tidak ada batas maksimum berat yang ditentukan dan nilai ongkir volume lebih tinggi</span>`;
                } else {
                    message += `<span class="mt-1 block text-xs opacity-80">Alasan: Berat total ${formatNumber(totalWeight)} kg masih di bawah batas maksimum ${formatNumber(maxWeight)} kg</span>`;
                }
            } else {
                message = `<span class="text-green-700 font-medium">Menggunakan perhitungan Berat</span>: ${formatNumber(totalWeight)} kg × Rp ${formatNumber(hargaOngkirWg)} = <span class="font-bold">Rp ${formatNumber(selectedCost)}</span><br>`;
                
                if (maxWeight === 0) {
                    message += `<span class="mt-1 block text-xs opacity-80">Alasan: Tidak ada batas maksimum berat yang ditentukan dan nilai ongkir berat lebih tinggi</span>`;
                } else {
                    message += `<span class="mt-1 block text-xs opacity-80">Alasan: Berat total ${formatNumber(totalWeight)} kg melebihi batas maksimum ${formatNumber(maxWeight)} kg</span>`;
                }
            }
            
            // Update UI untuk perhitungan yang digunakan
            $('#used_calculation_message').html(message);
            $('#selected_shipping_cost').val(formatNumber(selectedCost));
            $('#calculation_method_used').val(selectedMethod);
            
            // Otomatis update biaya kirim (tanpa perlu tombol apply)
            $('#jkt_sda').val(formatNumber(selectedCost));
            
            // Hitung ulang semua biaya
            calculateFees();
        }
        
        // Modifikasi function calculateFees untuk memasukkan perhitungan otomatis
        function calculateFees() {
            let totalFees = 0;
            
            $('[data-fee="true"]').each(function() {
                totalFees += parseNumberFromFormatted($(this).val()) || 0;
            });
            $('#biaya').val(formatNumber(totalFees));
            const nilaiBarang = parseNumberFromFormatted($('#nilai').val()) || 0;
            $('#nilai_biaya').val(formatNumber(nilaiBarang + totalFees));
            $('#biaya_kirim').val(formatNumber(totalFees));
            
            calculatePPN();
            calculateGrandTotal();
        }
    });

    $(document).ready(function() {
        updateNilaiDisplay();
        
        function updateNilaiDisplay() {
            const nilaiValue = parseNumberFromFormatted($('#nilai').val()) || 0;
            $('#nilai_simple').text('Rp ' + formatNumber(nilaiValue));
        }
        
        function calculateFees() {
            let totalFees = 0;
            
            $('[data-fee="true"]').each(function() {
                totalFees += parseNumberFromFormatted($(this).val()) || 0;
            });
            
            $('#biaya').val(formatNumber(totalFees));
            
            const nilaiBarang = parseNumberFromFormatted($('#nilai').val()) || 0;
            $('#nilai_biaya').val(formatNumber(nilaiBarang + totalFees));
            updateNilaiDisplay();
            
            $('#biaya_kirim').val(formatNumber(totalFees));
            
            calculatePPN();
            calculateGrandTotal();
        }
        
        // Update nilai when calculated
        function updateNilaiValue(value) {
            $('#nilai').val(formatNumber(value));
            updateNilaiDisplay();
        }
        
        // Override existing handlers as needed
    });
</script>